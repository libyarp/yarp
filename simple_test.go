// Code generated by yarpc. DO NOT EDIT.

package yarp

import (
	"context"
	"fmt"
)
import "reflect"

func RegisterMessages() {
	RegisterStructType(SimpleRequest{}, SimpleResponse{})
}

type SimpleRequest struct {
	*Structure
	Name  string `index:"0"`
	Email string `index:"1"`
}

func (SimpleRequest) YarpID() uint64         { return 0x49d21cd8ab98916a }
func (SimpleRequest) YarpPackage() string    { return "io.libsimple" }
func (SimpleRequest) YarpStructName() string { return "SimpleRequest" }

type SimpleResponse struct {
	*Structure
	ID int32 `index:"0"`
}

func (SimpleResponse) YarpID() uint64         { return 0x38c441c644a20f31 }
func (SimpleResponse) YarpPackage() string    { return "io.libsimple" }
func (SimpleResponse) YarpStructName() string { return "SimpleResponse" }

type SimpleServiceClient interface {
	RegisterUser(ctx context.Context, req *SimpleRequest, optHeaders map[string]string) (<-chan *SimpleResponse, Header, error)
	DeregisterUser(ctx context.Context, req *SimpleRequest, optHeaders map[string]string) (*SimpleResponse, Header, error)
}

type SimpleServiceServer interface {
	RegisterUser(ctx context.Context, headers Header, req *SimpleRequest, out *SimpleResponseStreamer) error
	DeregisterUser(ctx context.Context, headers Header, req *SimpleRequest) (Header, *SimpleResponse, error)
}

func NewSimpleServiceClient(addr string, opts ...Option) SimpleServiceClient {
	return &_yarpClientSimpleService{c: NewClient(addr, opts...)}
}

type _yarpClientSimpleService struct {
	c *Client
}

func (cli *_yarpClientSimpleService) RegisterUser(ctx context.Context, req *SimpleRequest, optHeaders map[string]string) (<-chan *SimpleResponse, Header, error) {
	request := Request{
		Method:  0xfae9fdbf2da30f43,
		Headers: optHeaders,
	}

	res, headers, err := cli.c.DoRequestStreamed(ctx, request, req)
	if err != nil {
		return nil, nil, err
	}
	ch := make(chan *SimpleResponse, 10)
	go func() {
		defer close(ch)
		for i := range res {
			if v, ok := i.(*SimpleResponse); ok {
				ch <- v
			} else {
				fmt.Printf("BUG: i is %#v\n", i)
			}
		}
	}()
	return ch, headers, nil
}

func (cli *_yarpClientSimpleService) DeregisterUser(ctx context.Context, req *SimpleRequest, optHeaders map[string]string) (*SimpleResponse, Header, error) {
	request := Request{
		Method:  0x4188d482f6f148,
		Headers: optHeaders,
	}

	res, headers, err := cli.c.DoRequest(ctx, request, req)
	if err != nil {
		return nil, nil, err
	}
	if t, ok := res.(*SimpleResponse); ok {
		return t, headers, nil
	}
	return nil, nil, IncompatibleTypeError{
		Received: res,
		Wants:    reflect.TypeOf(&SimpleResponse{}),
	}
}

func RegisterSimpleService(s *Server, v SimpleServiceServer) {
	s.RegisterHandler(0xfae9fdbf2da30f43, "io.libsimple.SimpleService.register_user", v.RegisterUser)
	s.RegisterHandler(0x4188d482f6f148, "io.libsimple.SimpleService.deregister_user", v.DeregisterUser)
}

type SimpleResponseStreamer struct {
	h  Header
	ch chan<- *SimpleResponse
}

func (i SimpleResponseStreamer) Headers() Header   { return i.h }
func (i SimpleResponseStreamer) Push(v *SimpleResponse) { i.ch <- v }
